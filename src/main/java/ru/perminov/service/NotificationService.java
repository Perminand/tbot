package ru.perminov.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.math.BigDecimal;

@Service
@RequiredArgsConstructor
@Slf4j
public class NotificationService {
    
    private final List<Notification> notifications = new ArrayList<>();
    private static final int MAX_NOTIFICATIONS = 100;
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    public void sendTradeNotification(String figi, String action, int lots, BigDecimal price, BigDecimal totalValue) {
        String message = String.format("üîî –¢–û–†–ì–û–í–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø: %s %d –ª–æ—Ç–æ–≤ %s –ø–æ —Ü–µ–Ω–µ %.2f —Ä—É–±. (%.2f —Ä—É–±.)", 
            action, lots, figi, price, totalValue);
        
        addNotification(NotificationType.TRADE, message, NotificationPriority.HIGH);
        log.info("Trade notification: {}", message);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∏—Å–∫–µ
     */
    public void sendRiskNotification(String riskType, String description) {
        String message = String.format("‚ö†Ô∏è –†–ò–°–ö: %s - %s", riskType, description);
        
        addNotification(NotificationType.RISK, message, NotificationPriority.HIGH);
        log.warn("Risk notification: {}", message);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–µ
     */
    public void sendPnLNotification(BigDecimal pnl, BigDecimal portfolioValue) {
        BigDecimal pnlPercentage = pnl.divide(portfolioValue, 4, java.math.RoundingMode.HALF_UP)
            .multiply(java.math.BigDecimal.valueOf(100));
        
        String emoji = pnl.compareTo(java.math.BigDecimal.ZERO) >= 0 ? "üìà" : "üìâ";
        String message = String.format("%s P&L: %.2f —Ä—É–±. (%.2f%%)", emoji, pnl, pnlPercentage);
        
        addNotification(NotificationType.PNL, message, NotificationPriority.MEDIUM);
        log.info("P&L notification: {}", message);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
     */
    public void sendPortfolioNotification(BigDecimal totalValue, int positionsCount) {
        String message = String.format("üíº –ü–û–†–¢–§–ï–õ–¨: %.2f —Ä—É–±., %d –ø–æ–∑–∏—Ü–∏–π", totalValue, positionsCount);
        
        addNotification(NotificationType.PORTFOLIO, message, NotificationPriority.LOW);
        log.info("Portfolio notification: {}", message);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    public void sendErrorNotification(String error, String details) {
        String message = String.format("‚ùå –û–®–ò–ë–ö–ê: %s - %s", error, details);
        
        addNotification(NotificationType.ERROR, message, NotificationPriority.HIGH);
        log.error("Error notification: {}", message);
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
     */
    private void addNotification(NotificationType type, String message, NotificationPriority priority) {
        Notification notification = new Notification();
        notification.setType(type);
        notification.setMessage(message);
        notification.setPriority(priority);
        notification.setTimestamp(LocalDateTime.now());
        
        synchronized (notifications) {
            notifications.add(0, notification); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (notifications.size() > MAX_NOTIFICATIONS) {
                notifications.remove(notifications.size() - 1);
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    public List<Notification> getAllNotifications() {
        synchronized (notifications) {
            return new ArrayList<>(notifications);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
     */
    public List<Notification> getNotificationsByType(NotificationType type) {
        synchronized (notifications) {
            return notifications.stream()
                .filter(n -> n.getType() == type)
                .collect(java.util.stream.Collectors.toList());
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
     */
    public List<Notification> getNotificationsByPriority(NotificationPriority priority) {
        synchronized (notifications) {
            return notifications.stream()
                .filter(n -> n.getPriority() == priority)
                .collect(java.util.stream.Collectors.toList());
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    public void clearOldNotifications(int hoursOld) {
        LocalDateTime cutoff = LocalDateTime.now().minusHours(hoursOld);
        
        synchronized (notifications) {
            notifications.removeIf(n -> n.getTimestamp().isBefore(cutoff));
        }
    }
    
    /**
     * –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    public enum NotificationType {
        TRADE("–¢–æ—Ä–≥–æ–≤–ª—è"),
        RISK("–†–∏—Å–∫"),
        PNL("–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫"),
        PORTFOLIO("–ü–æ—Ä—Ç—Ñ–µ–ª—å"),
        ERROR("–û—à–∏–±–∫–∞"),
        SYSTEM("–°–∏—Å—Ç–µ–º–∞");
        
        private final String displayName;
        
        NotificationType(String displayName) {
            this.displayName = displayName;
        }
        
        public String getDisplayName() {
            return displayName;
        }
    }
    
    /**
     * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    public enum NotificationPriority {
        LOW("–ù–∏–∑–∫–∏–π"),
        MEDIUM("–°—Ä–µ–¥–Ω–∏–π"),
        HIGH("–í—ã—Å–æ–∫–∏–π"),
        CRITICAL("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π");
        
        private final String displayName;
        
        NotificationPriority(String displayName) {
            this.displayName = displayName;
        }
        
        public String getDisplayName() {
            return displayName;
        }
    }
    
    /**
     * –ú–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    public static class Notification {
        private NotificationType type;
        private String message;
        private NotificationPriority priority;
        private LocalDateTime timestamp;
        private boolean read = false;
        
        // Getters and setters
        public NotificationType getType() { return type; }
        public void setType(NotificationType type) { this.type = type; }
        
        public String getMessage() { return message; }
        public void setMessage(String message) { this.message = message; }
        
        public NotificationPriority getPriority() { return priority; }
        public void setPriority(NotificationPriority priority) { this.priority = priority; }
        
        public LocalDateTime getTimestamp() { return timestamp; }
        public void setTimestamp(LocalDateTime timestamp) { this.timestamp = timestamp; }
        
        public boolean isRead() { return read; }
        public void setRead(boolean read) { this.read = read; }
        
        public String getFormattedTimestamp() {
            return timestamp.format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
        }
    }
}
